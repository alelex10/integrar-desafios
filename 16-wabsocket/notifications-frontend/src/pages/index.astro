---
import LayoutMain from "../layout/LayoutMain.astro";
---

<LayoutMain>
	<main class="main__notifications">
		<section class="notification__id-user"></section>

		<section>
			<h2><b>ðŸ‘¥Usuarios conectados</b></h2>
			<div class="notification__users-connected"></div>
		</section>
	</main>
</LayoutMain>
<style>
	h2 {
		color: var(--color-white);
		margin: 1rem auto;
		text-align: center;
	}
	.main__notifications {
		padding: 2rem;
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 2rem;
	}

	.notification__id-user {
		background-color: #23262d;
		padding: 1rem 1.5rem;
		border-radius: 8px;
		font-size: 1.1rem;
		font-weight: 500;
	}

	.notification__users-connected {
		width: 100%;
		max-width: 500px;
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		/* flex-direction: column; */
		gap: 0.75rem;
		text-align: center;
	}

	.notification__users-connected p {
		background-color: #2a2d35;
		padding: 0.75rem 1rem;
		border-radius: 4px;
		margin: 0;
		word-break: break-all;
	}
	/* ------------------------------------------- */
	.modalFormNotification {
		background-color: #2a2d35;
		color: rebeccapurple;
		border: 1px solid #4a4d55;
		border-radius: 8px;
		padding: 1.5rem;
		width: 90%;
		max-width: 400px;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
	}

	.modalFormNotification::backdrop {
		background-color: rgba(0, 0, 0, 0.7);
		backdrop-filter: blur(2px);
	}

	.modalForm {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.modalForm p {
		margin: 0;
		font-size: 1.1rem;
		word-break: break-all;
	}

	.modalForm p strong {
		color: #818cf8;
	}

	.modalForm textarea {
		background-color: #23262d;
		color: var(--color-white);
		border: 1px solid #4a4d55;
		border-radius: 4px;
		padding: 0.75rem;
		font-family: inherit;
		font-size: 1rem;
		resize: vertical;
		min-height: 100px;
	}

	.modalForm textarea:focus {
		outline: none;
		border-color: #6366f1;
		box-shadow: 0 0 0 2px #4f46e5;
	}

	.modalForm button {
		padding: 0.75rem 1rem;
		border: none;
		border-radius: 4px;
		font-size: 1rem;
		font-weight: 500;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

	.modalForm .send-message-button {
		background-color: #6366f1;
		color: white;
	}

	.modalForm .send-message-button:hover {
		background-color: #4f46e5;
	}

	.modalForm button:last-of-type {
		background-color: #4a4d55;
		color: white;
	}
</style>
<script>
	import { socket } from "../gateway/gateway";
	const usersConnected = document.querySelector(".notification__users-connected");

	interface Response<T> {
		success: boolean;
		message: string;
		data: T;
	}
	interface UserConectedResponse {
		usersIds: string[];
	}
	interface SendNotification {
		userId: string;
		message: string;
		type: string;
	}

	// Conectar
	socket.on("my-user-id", (data: Response<string>) => {
		console.log("Mi ID: " + data.data);
		const myUserId = document.querySelector(".notification__id-user");
		if (myUserId) {
			myUserId.innerHTML = "Mi ID: " + data.data;
		}
	});

	// Usuarios conectados
	socket.on("users-conected", (data: Response<UserConectedResponse>) => {
		console.log("Usuarios conectados: " + data.data.usersIds);
		drawUsersIds(data.data.usersIds);
	});

	// listen notification

	socket.on("notification", (data: Response<Notification>) => {
		console.log(data);
	});

	// Draw ID users

	const drawUsersIds = (usersIds: string[]) => {
		usersIds = usersIds.filter((id) => id !== socket.id);
		if (usersConnected) {
			usersConnected.innerHTML = usersIds
				.map(
					(id) =>
						`
							<p>${id}</p>
							<button class="sendNotification" id="${id}">Enviar Notificacion</button>
							<dialog id="modal-${id}" closedby="any">
								<form method="dialog" class="modalForm">
									<p>Enviar mensaje a: <strong>${id}</strong></p>
									<textarea id="message-${id}" placeholder="Escribe tu mensaje"></textarea>
									<button class="send-message-button" id="${id}">Enviar</button>
									<button>Close</button>
								</form>
							</dialog>
						`
				)
				.join("");
			addEventListeners();
		}
	};

	const addEventListeners = () => {
		document.querySelectorAll(".sendNotification").forEach((button) => {
			button.addEventListener("click", (event) => {
				const userId = button.id;
				const modal = document.getElementById(`modal-${userId}`) as HTMLDialogElement;
				if (modal) {
					modal.style.margin = "auto";
					modal.classList.add("modalForm");

					modal.showModal();
				}
			});
		});

		document.querySelectorAll(".send-message-button").forEach((button) => {
			button.addEventListener("click", (event) => {
				const userId = button.id;
				const messageInput = document.getElementById(`message-${userId}`) as HTMLTextAreaElement;
				const message = messageInput.value;
				socket.emit("create-notification", {
					userId: userId,
					message: message,
					type: "info",
				});
				const modal = document.getElementById(`modal-${userId}`) as HTMLDialogElement;
				modal.close();
			});
		});
	};
</script>
